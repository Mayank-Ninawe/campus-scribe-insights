
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://woulrjxckivziwsjzzvf.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6IndvdWxyanhja2l2eml3c2p6enZmIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDU1ODI0MDEsImV4cCI6MjA2MTE1ODQwMX0.28cKwiZ6llYtOSzOaC4CLed6dRbQMEFT__QHl8KfR5M";

// Helper function to check admin status
export const checkAdminStatus = async (email: string) => {
  try {
    const { data, error } = await supabase.rpc('get_admin_status', {
      admin_email: email,
    });
    if (error) throw error;
    return data || false;
  } catch (error) {
    console.error('Error checking admin status:', error);
    return false;
  }
};

// Helper function to enable realtime for a table
export const enableRealtimeForTable = async (tableName: string) => {
  try {
    console.log(`Attempting to enable realtime for ${tableName} table`);
    
    // Since _realtime is not in our database types, we'll use a raw query approach
    const { error } = await supabase.rpc('enable_realtime_for_table', {
      table_name: tableName,
    })
    .catch(e => {
      console.log('RPC method not found, this is expected in development:', e);
      return { error: null }; // Continue execution even if RPC fails
    });
    
    if (error) {
      console.log('Error enabling realtime with RPC method:', error);
      console.log('This is normal if the function is not yet available');
    }
    
    return { success: !error };
  } catch (error) {
    console.error(`Error enabling realtime for ${tableName}:`, error);
    return { success: false, error };
  }
};

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  realtime: {
    params: {
      eventsPerSecond: 10,
    },
  },
});
